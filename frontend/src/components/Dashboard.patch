--- Dashboard.js.old	2023-03-05 00:00:00
+++ Dashboard.js.new	2023-03-05 00:00:00
@@ -6,6 +6,7 @@
   Settings, ChevronDown, Info, FileText, Download
 } from 'lucide-react';
 import { useAuth } from '../context/AuthContext';
+import AddHostModal from './AddHostModal';
 import api from '../services/api';
 
 // Component for displaying the status indicator
@@ -18,73 +19,6 @@
   return <XCircle className="text-red-500" size={18} />;
 };
 
-// Modal component for adding hosts
-const AddHostModal = ({ isOpen, onClose, onAdd }) => {
-  const [hostname, setHostname] = useState('');
-  const [bulkInput, setBulkInput] = useState('');
-  const [isProcessing, setIsProcessing] = useState(false);
-  const [error, setError] = useState('');
-  
-  const handleSubmit = async (e) => {
-    e.preventDefault();
-    setError('');
-    setIsProcessing(true);
-    
-    try {
-      if (hostname) {
-        // Add single host
-        await api.addHost(hostname);
-      } else if (bulkInput) {
-        // Process bulk input
-        const lines = bulkInput.split('\n').filter(line => line.trim() !== '');
-        await api.bulkAddHosts(lines);
-      } else {
-        setError('Please enter either a hostname or bulk data');
-        setIsProcessing(false);
-        return;
-      }
-      
-      onAdd();
-      onClose();
-    } catch (err) {
-      console.error('Error adding host:', err);
-      setError(err.error || 'Failed to add host. Please check your input.');
-    } finally {
-      setIsProcessing(false);
-    }
-  };
-  
-  if (!isOpen) return null;
-  
-  return (
-    <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center p-4 z-50">
-      <div className="bg-gray-800 rounded-lg w-full max-w-lg">
-        <div className="p-4 border-b border-gray-700 flex justify-between items-center">
-          <h3 className="text-lg font-medium text-white">Add New Host</h3>
-          <button 
-            className="text-gray-400 hover:text-white"
-            onClick={onClose}
-          >
-            &times;
-          </button>
-        </div>
-        
-        <form onSubmit={handleSubmit}>
-          <div className="p-4">
-            {error && (
-              <div className="mb-4 bg-red-900/30 border border-red-500 rounded-md p-3">
-                <p className="text-red-100 text-sm">{error}</p>
-              </div>
-            )}
-            
-            <div className="mb-4">
-              <label className="block text-sm font-medium text-gray-300 mb-1">Host Name</label>
-              <input 
-                type="text" 
-                className="w-full bg-gray-700 border border-gray-600 rounded-md py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
-                placeholder="e.g., jboss-server.example.com"
-                value={hostname}
-                onChange={(e) => setHostname(e.target.value)}
-              />
-            </div>
 
 // JBoss credentials modal component
 const CredentialsModal = ({ isOpen, onClose, onSubmit, title }) => {
@@ -297,19 +231,28 @@
 // Main Dashboard component
 const Dashboard = () => {
   const { currentUser, environment, logout } = useAuth();
-  const [hosts, setHosts] = useState([]);
+  const [hosts, setHosts] = useState([]); 
   const [isLoading, setIsLoading] = useState(true);
   const [error, setError] = useState('');
   const [showAddModal, setShowAddModal] = useState(false);
   const [showCredentialsModal, setShowCredentialsModal] = useState(false);
   const [refreshInterval, setRefreshInterval] = useState(30); // seconds
   const [lastRefresh, setLastRefresh] = useState(null);
   const [autoRefresh, setAutoRefresh] = useState(true);
   const [expandedHosts, setExpandedHosts] = useState({});
   const [reports, setReports] = useState([]);
   const [currentReport, setCurrentReport] = useState(null);
   const [isGeneratingReport, setIsGeneratingReport] = useState(false);
 
+  // Handle adding a host
+  const handleAddHost = async (hostname, bulkLines) => {
+    try {
+      if (hostname) {
+        await api.addHost(hostname);
+      } else if (bulkLines && bulkLines.length > 0) {
+        await api.bulkAddHosts(bulkLines);
+      }
+      fetchData();
+    } catch (err) {
+      console.error("Error in handleAddHost:", err);
+      throw err;
+    }
+  };
+
   // Load hosts and status data
   const fetchData = useCallback(async (jbossCredentials = null) => {
     try {
@@ -655,7 +598,7 @@
       <AddHostModal
         isOpen={showAddModal}
         onClose={() => setShowAddModal(false)}
-        onAdd={fetchData}
+        onAdd={handleAddHost}
       />
       
       {/* Credentials Modal */}
